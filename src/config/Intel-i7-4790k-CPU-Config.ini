;Intel i7 4790K Configuration file
;i7 4790K has 4 cores and 2 threads per core


[General]
;Frequency in MHz for the x86 CPU. Value between 1 and 10K. (Default = 1000 MHz).
;Number of cores. (Default = 1).
;Number of hardware threads per core. The total number of computing nodes 
;	in the CPU model is equals to Cores * Threads. (Default = 1).
;Number of x86 instructions to run with a fast functional simulation 
;	before the architectural simulation starts. (Default = 0).
;If ContextSwitch is true, maximum number of cycles that a context can 
;	occupy a CPU hardware thread before it is replaced by other pending context. 
;	(Default = 100k).
;For multithreaded processors (Threads > 1) configured as coarse-grain multi-threading 
;	(FetchKind = SwitchOnEvent), number of cycles in which instructions are 
;	fetched from the same thread before switching. (Default = 1k).
;For coarse-grain multithreaded processors (FetchKind = SwitchOnEvent), number of 
;	cycles that the fetch stage stalls after a thread switch. (Default = 0).
;On branch misprediction, stage in the execution of the mispredicted branch when 
;	processor recovery is triggered. (Default = Writeback).
;Number of cycles that the fetch stage gets stalled after a branch misprediction. (Default = 0).
;Memory page size in bytes. (Default = 4kB).
;DataCachePerfect. (Default = False)\n"
;If specified as false, the cpu will ignore any prefetch hints/instructions. (Default = True).
;Number of past prefetches to keep track of, so as to avoid redundant prefetches from being
;	issued from the cpu to the cache module. (Default = 10).
;Set these options to true to simulate a perfect data/instruction caches,
;	respectively, where every access results in a hit. If set to false, the
;	parameters of the caches are given in the memory configuration file  (Default = False).
Frequency = 4000
Cores = 1
Threads = 1
;FastForward = 0
ContextQuantum = 100k
ThreadQuantum = 100k
;ThreadSwitchPenalty = 0
;RecoverKind = Writeback
;RecoverPenalty = 0
;PageSize = 4096 (normal is 4K pow 2)
;DataCachePerfect = f
;ProcessPrefetchHints = f
;PrefetchHistorySize = 10
;InstructionCachePerfect = f


;[Pipeline]
;Policy for fetching instruction from different threads. A shared fetch stage
;	fetches instructions from different threads in the same cycle; a time-slice
;	fetch switches between threads in a round-robin fashion; option SwitchOnEvent
;   switches thread fetch on long-latency operations or thread quantum expiration.
;	{Shared|TimeSlice|SwitchOnEvent} (Default = TimeSlice).
;Number of x86 instructions decoded per cycle. (Default = 4).
;Policy for dispatching instructions from different threads. If shared,\n"
;	instructions from different threads are dispatched in the same cycle. Otherwise,\n"
;	instruction dispatching is done in a round-robin fashion at a cycle granularity. 
;	{Shared|TimeSlice} (Default = TimeSlice).
;Number of microinstructions dispatched per cycle. (Default = 4).
;Policy for issuing instructions from different threads. If shared, instructions
;	from different threads are issued in the same cycle; otherwise, instruction issue
;	is done round-robin at a cycle granularity. {Shared|TimeSlice} (Default = TimeSlice).
;Number of microinstructions issued per cycle. (Default = 4).
;Policy for committing instructions from different threads. If shared,
;	instructions from different threads are committed in the same cycle; otherwise,
;	they commit in a round-robin fashion. {Shared|TimeSlice} (Default = Shared).
;Number of microinstructions committed per cycle. (Default = 4).
;Calculate structures occupancy statistics. Since this computation requires
;	additional overhead, the option needs to be enabled explicitly. These statistics
;	will be attached to the CPU report. (Default = False).
;FetchKind = TimeSlice
;DecodeWidth = 4
;DispatchKind = TimeSlice
;DispatchWidth = 4
;IssueKind = TimeSlice
;IssueWidth = 4
;CommitKind = Shared
;CommitWidth = 4
;OccupancyStats = f


;[Queues]
;Size of the fetch queue given in bytes. <bytes> (Default = 64).
;Size of the uop queue size, given in number of uops. <num_uops> (Default = 32)
;Reorder buffer sharing among hardware threads. {Private|Shared} (Default = Private).
;Reorder buffer size in number of microinstructions (if private, per-thread size). 
;	<num_uops> (Default = 64).
;Instruction queue sharing among threads. {Private|Shared} (Default = Private).
;Instruction queue size in number of uops (if private, per-thread IQ size). 
;	<num_uops> (Default = 40).
;Load-store queue sharing among threads. {Private|Shared} (Default = Private).
;Load-store queue size in number of uops (if private, per-thread LSQ size). 
;	<num_uops> (Default = 20).
;Register file sharing among threads. {Private|Shared} (Default = Private).
;Number of integer physical register (if private, per-thread). <entries> (Default = 80).
;Number of floating-point physical registers (if private, per-thread). 
;	<entries> (Default = 40).
;Number of XMM physical registers (if private, per-thread). <entries> (Default = 40).  
;FetchQueueSize = 64
;UopQueueSize = 32
;RobKind = Private
;RobSize = 64
;IqKind = Private
;IqSize = 64
;LsqKind = Private
;LsqSize = 128
;RfKind = Private
;RfIntSize = 80
;RfFpSize = 40
;RfXmmSize = 40


;[TraceCache]
;If true, a trace cache is included in the model. If false, the rest of the
;	options in this section are ignored. (Default = False)
;Number of sets in the trace cache. <num_sets> (Default = 64).
;Associativity of the trace cache. The product Sets * Assoc is the total
;	number of traces that can be stored in the trace cache. <num_ways> (Default = 4).
;Maximum size of a trace of uops. <num_uops> (Default = 16)
;Maximum number of branches contained in a trace. <num_branches> (Default = 3).
;Size of the trace queue size in uops. <num_uops> (Default = 32).
;Present = f
;Sets = 64
;Assoc = 4
;TraceSize = 16
;BranchMax = 3
;QueueSize = 32


;[FunctionalUnits]
;for gerneral purpose leave this section as all defaults.

;The possible variables in this section follow the format <func_unit>.<field> = <value>
;where <func_unit> refers to a functional unit type, and <field> refers to a
;property of it. Possible values for <func_unit> are:
;
;IntAdd      Integer adder
;IntMult     Integer multiplier
;IntDiv      Integer divider
;
;EffAddr     Operator for effective address computations
;Logic       Operator for logic operations
;
;FloatSimple    Simple floating-point operations
;FloatAdd       Floating-point adder
;FloatComp      Floating-point comparator
;FloatMult      Floating-point multiplier
;FloatDiv       Floating-point divider
;FloatComplex   Operator for complex floating-point computations
;
;XMMIntAdd      XMM integer adder
;XMMIntMult     XMM integer multiplier
;XMMIntDiv      XMM integer Divider
;
;XMMLogic       XMM logic operations
;
;XMMFloatAdd       XMM floating-point adder
;XMMFloatComp      XMM floating-point comparator
;XMMFloatMult      XMM floating-point multiplier
;XMMFloatDiv       XMM floating-point divider
;XMMFloatConv      XMM floating-point converter
;XMMFloatComplex   Complex XMM floating-point operations
;
;Possible values for <field> are:
;Count       Number of functional units of a given kind.
;OpLat       Latency of the operator.
;IssueLat    Latency since an instruction was issued until the functional
;unit is available for the next use. For pipelined operators,
;IssueLat is smaller than OpLat.


[BranchPredictor]
;Branch predictor type. {Perfect|Taken|NotTaken|Bimodal|TwoLevel|Combined} (Default = TwoLevel).
;Number of sets in the BTB. <num_sets> (Default = 256).
;BTB associativity. <num_ways> (Default = 4).
;Number of entries of the bimodal branch predictor. <entries> (Default = 1024).
;Number of entries for the choice predictor. <entries> (Default = 1024).
;Number of entries of the return address stack (RAS). <entries> (Default = 32).
;For the two-level adaptive predictor, level 1 size. <entries> (Default = 1).
;For the two-level adaptive predictor, level 2 size. <entries> (Default = 1024).
;For the two-level adaptive predictor, level 2 history size. <size> (Default = 8).
Kind = Perfect
;BTB.Sets = 256
;BTB.Assoc = 4
;Bimod.Size = 1024
;Choice.Size = 1024
;RAS.Size = 32 
;TwoLevel.L1Size = 1
;TwoLevel.L2Size = 1024
;TwoLevel.HistorySize = 8
